// Generated by Dagger (https://dagger.dev).
package com.iitp.signagekiosk.questionnaire;

import com.iitp.saltlux_talkbot.TalkBot;
import com.iitp.saltlux_talkbot.TalkReader;
import com.iitp.signagekiosk.vital_sensor.Sensor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class QuestionnaireViewModel_Factory implements Factory<QuestionnaireViewModel> {
  private final Provider<TalkBot> talkBotProvider;

  private final Provider<TalkReader> talkReaderProvider;

  private final Provider<Sensor> sensorProvider;

  public QuestionnaireViewModel_Factory(Provider<TalkBot> talkBotProvider,
      Provider<TalkReader> talkReaderProvider, Provider<Sensor> sensorProvider) {
    this.talkBotProvider = talkBotProvider;
    this.talkReaderProvider = talkReaderProvider;
    this.sensorProvider = sensorProvider;
  }

  @Override
  public QuestionnaireViewModel get() {
    return newInstance(talkBotProvider.get(), talkReaderProvider.get(), sensorProvider.get());
  }

  public static QuestionnaireViewModel_Factory create(Provider<TalkBot> talkBotProvider,
      Provider<TalkReader> talkReaderProvider, Provider<Sensor> sensorProvider) {
    return new QuestionnaireViewModel_Factory(talkBotProvider, talkReaderProvider, sensorProvider);
  }

  public static QuestionnaireViewModel newInstance(TalkBot talkBot, TalkReader talkReader,
      Sensor sensor) {
    return new QuestionnaireViewModel(talkBot, talkReader, sensor);
  }
}
