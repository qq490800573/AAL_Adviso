// Generated by Dagger (https://dagger.dev).
package com.iitp.signagekiosk;

import com.iitp.saltlux_talkbot.util.ServerStatusChecker;
import com.iitp.signagekiosk.vital_sensor.Sensor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<ServerStatusChecker> serverStateCheckerProvider;

  private final Provider<Sensor> sensorProvider;

  public MainViewModel_Factory(Provider<ServerStatusChecker> serverStateCheckerProvider,
      Provider<Sensor> sensorProvider) {
    this.serverStateCheckerProvider = serverStateCheckerProvider;
    this.sensorProvider = sensorProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(serverStateCheckerProvider.get(), sensorProvider.get());
  }

  public static MainViewModel_Factory create(
      Provider<ServerStatusChecker> serverStateCheckerProvider, Provider<Sensor> sensorProvider) {
    return new MainViewModel_Factory(serverStateCheckerProvider, sensorProvider);
  }

  public static MainViewModel newInstance(ServerStatusChecker serverStateChecker, Sensor sensor) {
    return new MainViewModel(serverStateChecker, sensor);
  }
}
