// Generated by Dagger (https://dagger.dev).
package com.iitp.signagekiosk.loading;

import com.iitp.signagekiosk.vital_sensor.Sensor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoadingViewModel_Factory implements Factory<LoadingViewModel> {
  private final Provider<Sensor> sensorProvider;

  public LoadingViewModel_Factory(Provider<Sensor> sensorProvider) {
    this.sensorProvider = sensorProvider;
  }

  @Override
  public LoadingViewModel get() {
    return newInstance(sensorProvider.get());
  }

  public static LoadingViewModel_Factory create(Provider<Sensor> sensorProvider) {
    return new LoadingViewModel_Factory(sensorProvider);
  }

  public static LoadingViewModel newInstance(Sensor sensor) {
    return new LoadingViewModel(sensor);
  }
}
